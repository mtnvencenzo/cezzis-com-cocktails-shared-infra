variables:
  serviceConnectionName: 'sc-vec-eus-default-svc-principal-001'
  terraformStateResourceGroup: 'rg-vec-eus-administration-001'
  terraformStateStorageAccount: 'stveceusterraformstat001'
  terraformStateContainerName: 'terraform-cocktails'

  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    branchType: main
  ${{ if ne(variables['Build.SourceBranchName'], 'main') }}: 
    branchType: pr

name: $(Build.DefinitionName)_$(branchType)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - cocktails.sharedinfrastructure/*

pool:
  vmImage: ubuntu-latest

stages:

##########################
### PREPARE DEPLOY
##########################
  - stage: PrepareDeploy
    displayName: 'Prepare for deploy'
    jobs:
    - job: ApplyBuildTags
      displayName: 'Apply tags'
      steps:
      - script: |
          echo "##vso[build.addbuildtag]$(branchType)"
          echo "##vso[build.addbuildtag]cockails"
          echo "##vso[build.addbuildtag]shared-infrastructure"
        displayName: 'Apply tags'

      - download: none
      - checkout: none  #skip loading source in this job (not needed)

##########################
### DEPLOY PRD
##########################

  - stage: DeployPrd
    displayName: 'Deploy to production'
    dependsOn:
      - PrepareDeploy

    variables:
      terraformStateBlobKey: 'cocktails/prd-cocktails-shared-infrastructure.tfstate'

    jobs:
    - deployment: Terraform
      displayName: 'Terraform plan and apply'
      environment: prd
      timeoutInMinutes: 360
      
      pool:
        vmImage: ubuntu-latest

      strategy:
        runOnce:
          deploy:
            steps:
            - template: terraform-plan-and-apply.yml
              parameters:
                env: prd
                branchType: ${{ variables.branchType }}
                workingDirectory: '$(System.DefaultWorkingDirectory)/cocktails.sharedinfrastructure/.terraform'
                serviceConnectionName: '$(serviceConnectionName)'
                terraformStateResourceGroup: '$(terraformStateResourceGroup)'
                terraformStateStorageAccount: '$(terraformStateStorageAccount)'
                terraformStateContainerName: '$(terraformStateContainerName)'
                terraformStateBlobKey: '$(terraformStateBlobKey)'

          